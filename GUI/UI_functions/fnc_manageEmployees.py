# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'manageEmployees.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QEvent, Qt, QObject
from GUI.UI_classes.ui_manageEmployees import Ui_MainWindow 
from GUI.UI_functions.fnc_newEmployee import NewEmployeeWindow
from database import Database
from GUI.UI_functions.fnc_salary_position import EmployeeInfoWindow

class EmployeeManageWindow(QtWidgets.QMainWindow):
    def __init__(self, mainMenu):
        super(EmployeeManageWindow, self).__init__()
        self.mainMenu = mainMenu
        #app = QtWidgets.QApplication(sys.argv)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.init_table()

        self.ui.tableWidget.viewport().installEventFilter(self)


        # function for the buttons
        self.ui.btn_back.clicked.connect(self.back)
        self.ui.btn_new.clicked.connect(self.newEmployee)

    def init_table(self):
        self.db = Database()
        employee_list = self.db.getEmployee_full_info()
        header_list = employee_list[0]
        value_list = employee_list[1]
        no_rows = len(value_list)
        no_columns = len(header_list) 
        self.ui.tableWidget.setRowCount(no_rows)
        self.ui.tableWidget.setColumnCount(no_columns)

        self.ui.tableWidget.setHorizontalHeaderLabels(tuple(header_list))
        self.ui.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.ui.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.ui.tableWidget.verticalHeader().hide()

        for row in range(no_rows):
            for col in range(no_columns):
                self.ui.tableWidget.setItem(row, col, QTableWidgetItem(str(value_list[row][col])))

    def eventFilter(self, obj, event):
        if(obj==self.ui.tableWidget.viewport() and event.type() == QEvent.MouseButtonPress):
            if(event.button()== Qt.RightButton):
                idx = self.ui.tableWidget.indexAt(event.pos())
                if idx.isValid():
                    deleteAction = QAction("Delete", self)
                    deleteAction.triggered.connect(self.delete_action_triggered)

                    modifyAction = QAction("Modify", self)
                    modifyAction.setObjectName(str(idx.row()))
                    modifyAction.triggered.connect(self.modify_action_triggered)

                    contextMenu = QMenu(self)
                    contextMenu.addAction(deleteAction)
                    contextMenu.addAction(modifyAction)
                    contextMenu.exec(event.globalPos())
                    
        return QMainWindow.eventFilter(self, obj, event)

    def delete_action_triggered(self):
        print("Delete")

    def modify_action_triggered(self):
        print("Modify")
        row = int(QObject.sender(self).objectName())
        id = int(self.ui.tableWidget.item(row, 0).text())
        self.employeeInfoWindow = EmployeeInfoWindow() 
        self.employeeInfoWindow.show()

    def back(self):
        self.hide()
        self.mainMenu.show()

    def newEmployee(self):
        self.newEmployee = NewEmployeeWindow()
        result = self.newEmployee.exec()  



